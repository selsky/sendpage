
# internal API

Modem extends Device::SerialPort & uses MyConfig

	Modem has:
		new
			need to understand how to "lock" a tty...
			(got that...using diald source as example)
		init (acts like "Device::SerialPort->write")
		   init needs: baud,parity,bits,stop from PagingCentral
		dial (acts like "Device::SerialPort->write")
		hangup	(duh)
		DESTROY (lets go of the device and releases the uucp lock)

	on load, each modem will have a "name", and read it's 
	configs that way.



PagingCentral uses MyConfig
	Keeps a list of modems it can use

	configs itself, does "chat" calls with the PC via Modem

	PC has the following methods available:

		send(PIN,TEXT)	this will attempt to send the page "TEXT"
				to the pin "PIN".
				Return values possible:
					0	successfully sent
					1	temporary failure: requeue
					2	permanent failure: toss
					3	system failure?

				I think code "3" should exist to keep the
				PC aware of the differences, just in case
				we need to create configurable back-off
				times.

	PC will interact with modem devices by cycling through a round
	robin list of the available modems, using "new" to find an unused
	modem.  PC should keep track of modem activity (or rather, failures)
	and report if a certain modem becomes repeatedly unusable? (as in,
	the "init" call fails)
	

Queue-scanner uses 1 PC
	each one is spawned from the Scheduler (at various intervals?)
	to run down the queue to find deliverable pages.

	Queue loop timings:
		- back-off time during system failures (1,2,4,8,16,drop?)
		- sort pages for delivery based on prioriety:
			- time in queue (LIFO)
			- time in queue (FIFO)
			- retry attempts? ... this may not be useful

	Signal handling:
		INT, QUIT:	finish up with transaction and stop
		TERM:		abort immediately
		USR1:		perform a queue run ASAP
		HUP:		ignore


Scheduler uses PagingCentrals
	This tool will implement the SNPP server-side of things,
	and track it's children (the Queue-scanners) via SIGCHLD,
	killing them during a reload, etc.

	Signal handling:
		INT, QUIT:	stop children and close up shop
		TERM:		abort immediately
		HUP:		reload configs, send children INT, and
					respawn children as they die
		USR1:		send USR1 to all children

overall:
	- should act like sendmail.
	- differences:
		- "sockets" here are not unlimited.  we have a limited
		  number of modems for any given PC (sendmail==sockets)
		- "destinations" here are not unlimited.  we have a limited
		  number of PCs  (sendmail==IPs)

	- what's the limiting factor? modems or PCs? since generally
	  any modem can talk to a PC, I think modems are the limiting
	  factor.  So, each Queue-scanner is associated with 1 modem?
	  And the Scheduler should watch its children and perhaps
	  implement the SNPP server side?  This means that Queue-scanners
	  are responsible for Queue management and Email notification.
	  Now... what about the situation where we're trying to optimize
	  our delivery based on a load of pages all to the same PC?  If
	  our queue-scanner is based on a modem, do we lose the ability to 
	  collect similar-PC pages?  So queue-manager should use a PC, not
	  a modem, perhaps?  Oh!  I could use semaphores to share the
	  "modem" resource!  Whee!

requirements for delivery:
	- want to be able to avoid a "bad modem" in the case where 
	  multiple modems are defined for a single PC
	- want to deliver as many pages as possible to a single PC in
	  a single session


external tools:
	I can imagine the existance of several external tools used to
	detect protocol differences between the PCs in the real world.
	The various limits and quirks may not always be obvious, so it
	would be nice to build a tool that could perform a battery of
	tests against a certain PC (and pager?), and come back with
	results.  This would be handy for populating the PC database,
	as well.
