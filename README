# $Id$

Sendpage (in Perl)

Quick Start (for Linux)
-----------

   Requirements.

	- Device::SerialPort  (or Win32::SerialPort, untested)
	  (0.07 works fine for linux.  If you're running under
           Solaris or AIX or HPUX, my "k1" patch might help)
	- Mail::MailTools

   Installation.

	- run the following commands:

		perl Makefile.PL
		make
		make install

	- copy 'sendpage.cf' into /etc, and edit to your needs
	- create the user "sendpage" and group.  Make sure it is a member
	  of the "uucp" group (or whichever group can write to
	  /var/lock) and the "tty" group (or whichever group
	  can read/write on your modem device).
	- make sure your modem device is writable.  For example, if
	  ttyS0 is your modem, and the "tty" group needs read/write:

		chmod g+rw /dev/ttyS0

	- make the queue area:

		mkdir -p /var/spool/sendpage
		chown sendpage:sendpage /var/spool/sendpage
		chmod g+sw /var/spool/sendpage

	- set sendpage to be setgid "sendpage":

		chgrp sendpage `which sendpage`
		chmod g+s `which sendpage`

	- start the sendpage daemon as the sendpage user

		su - sendpage -c "sendpage -bd"
	

Long Version
------------

Sendpage will be a fully-featured paging solution when it's done.
Right now I'm focusing on making sure it works on as many platforms as
I can get my hands on.  The future work includes implementing an SNPP
server.

Sendpage (the C program) was originally written in 1995 almost entirely
by Mark Fullmer.  Version "7" was when I became aware of it picked up
the code, since Mark didn't want to maintain it any more.  I developed
a "configure" script to make compiling easier, started working on merging
some features that other people had written, and stomping out a few bugs.
I released a series called "0.8", which still had a bunch of problems,
but seemed to mostly work for most people.  I haven't looked at the C
code in about a year, and it was getting rather dusty.  I was about to
work on porting it up to RedHat 6.1 and realized it would be easier to
redesign it from scratch.  I decided to use Perl because of all the great
modules I could use to help me get my job done.  And then I could spread
the blame around when things didn't work right.  ;)

And at this point I'd like to apologize here for my sloppy Perl modules.
I'm new to writing *modules* under Perl, so I fear that I'm violating
module and CPAN specs left and right.  I will try to correct any of these
problems as I learn about them.  My final goal is to produce a set of
modules that would be useful to any other packages that need to send
pages directly, and could be installed via CPAN. 

To get it started you'll need the following Perl modules installed:

	- a serial port module.  Either
		Device::SerialPort (for POSIX (unix))
			-or-
		Win32::SerialPort (for Windoze)
	- Mail::MailTools

You can get these from http://cpan.perl.org/

And please check this out for POSIX people (lifted from the Device::SerialPort
docs):

	There are a small number of ioctl calls to handle the RTS and DTR
	outputs. Those require (from more or less traditional locations) the
	outputs from "h2ph" for ioctl.h and related files. If the module does
	not find the prerequisites, it disables the method calls that require
	them and sets "can_ioctl" false.
        	.../_h2ph_pre.ph        .../asm/termios.ph
        	.../asm/termbits.ph     .../asm/posix_types.ph
        	.../asm/ioctls.ph       .../asm/ioctl.ph
        	.../linux/posix_types.ph

This is important for hanging up the modem, etc.  Some POSIX users running
on Solaris, AIX, or HPUX have had trouble with getting Device::Serial working,
so I have included a patch ("devserial-0.07-k1.patch") against version 0.07
which is a step in the right direction for getting any POSIX machine up
and running correctly.  If your Device::SerialPort doesn't behave (very
likely if running 0.07 under anything but linux), then I recommend applying
the patch to 0.07 before installing it:
	cd Device-SerialPort-0.07
	patch -p1 < ../sendpage-0.9.5/devserial-0.07-k1.patch
	perl Makefile.PL /dev/term/a
	make install

If you don't have a GNU patch installed on your non-Linux box, try using my
non-unified diff for patching Device::SerialPort: devserial-0.07-k1.not-uni
like so:
	patch -p1 < ../sendpage-0.9.5/devserial-0.07-k1.not-uni

If you choose to do the "make test", Solaris for me failed in a number
of places.  My output was:

Failed Test  Status Wstat Total Fail  Failed  List of failed
-------------------------------------------------------------------------------
t/test1.t                   173    8   4.62%  118, 121, 133, 141-142, 152-154
t/test3.t                   159    2   1.26%  107, 110

Half of the errors are with "pulse" commands taking too long.  The other
bugs are more serious, but shouldn't impact sendpage at all.  For now, you
can safely ignore those errors.  See the notes on compatibility below to
eliminate the timing errors under Solaris.

Now, build sendpage itself.  Right now, just do:
	cd sendpage-0.9.5
	perl Makefile.PL
	make
	make install

to install this package.  The important man page (sendpage's) is done.
The others are just overviews.  I need to finish those.

Make sure you create a sendpage user who has write access to /var/lock
and who owns /var/spool/sendpage.  BE SURE that /var/spool/sendpage is
set-group-id (as group "sendpage") and that sendpage itself is setgid
to sendpage.  In the future I'll want to work around this by having the
SNPP server running, and any client can just connect to that server invisibly,
and I won't have to worry about a setgid tool running around.

Once that's working, take a look at "sendpage.cf", and configure it for
your modem, paging central, etc.  Turn on the debugging if you're interested.
I'm going to eventually write a tool to convert old-style config files (and
perhaps even qpage and beepage config files) into the new-style config file.
Right now, this is not done.  Note that "sendpage.cf" needs to live in
/etc, or whereever you run "sendpage -C" with.

Now there is the "sendpage" daemon itself.  Run (as root) the command:
	su - sendpage -c "sendpage -bd"
to start up the daemon mode.  (Make sure that "sendpage" is in the PATH
for the "sendpage" user.)  The SNPP server is not implemented yet; it's
first on the list right now. 

To put a page into the queue, run "sendpage RECIP" where RECIP is either a 
valid alias "recip" section in /etc/sendpage.cf, or has the form PIN@PC,
where the PC is a valid "pc" section in /etc/sendpage.cf.  It will deliver
directly to the named PIN.

To force a queue run immediately, run (as root or sendpage) "sendpage -q".
If you have debugging turned on, it should be flooding your syslog with
lots of fun information while delivering the pages.

Look in the "docs" directory for various misc information files, including
the TAP specifications, the SNPP RFC, and a list of the known paging centrals
in the file "PagingCentrals.txt".  See if the PCs for your area are listed. 
If not, and you locate them, you should email them to me, and I'll update this
list.  There is also a searchable database of these available at the website
below.

Compatibility
-------------

Linux:	  This tool (and Device::SerialPort) was written and tested under
	  Linux.  There really shouldn't be any compatibility issues under
	  Linux.

Solaris:  Some headers under Solaris don't behave very well, so I had
	  to define "__sparc" explicitly in my patch to Device::SerialPort.
	  Also, under Solaris, many of the "make test" tests for
	  Device::SerialPort seem to hang and/or fail.  Most of these
	  seem safe to ignore as far as using sendpage with Device::SerialPort,
	  as the test failures seem to be with timings and/or flushes.
	  Most of that is unreliable anyway under Linux, so sendpage has
	  already worked around these bugs.

	  From the following URL:
	  http://www.stokely.com/unix.serial.port.resources/tutorials.html

		DTR Delay Problems: By default, Suns have a three second
		delay in toggling dtr. If your Sun has a zs serial port you
		can set the variable default_dtrlow to control the number of
		seconds of the delay. If the variable is set to zero, dtr
		can be toggled many times a second. For example, in
		/etc/system add the line "set zs:default_dtrlow = 1" to have
		a 1 second delay.  

		If your workstation has an se serial port, the /etc/system
		line should be "set se:se_default_dtrlow = 1". However, in
		initial versions of the se driver, the delay was the value
		of (se_default_dtrlow + 1) seconds. If you have this version
		of the se driver, don't set the value to -1 in /etc/system or
		the port will hang on open. If you need to toggle dtr quickly,
		you can still set the value to -1 after the terminal is
		opened by using adb to set the variable manually.

		All this is Sun bugid 4230310, fixed by patch 105924-09 or
		higher. The patch makes se_default_dtrlow behave like
		default_dtrlow (i.e. setting se_default_dtrlow to 0 will allow
		rapid toggling of dtr instead of once per second). 

	  So, since I have zs serial ports on my Sun, I added the line:

		set set zs:default_dtrlow = 0

	  so I could toggle the DTR rapidly.

	  Also, I've seen trouble using Syslog correctly under Solaris.
	  Once again, this appears to be Perl's fault.  If it breaks
	  ("Your vendor has not defined the Sys::Syslog macro _PATH_LOG")
	  then just edit KeesLog.pm and remove the calls to "setlogsock".

HPUX:	  Untested so far...

AIX:	  Untested so far...


Porting Device::SerialPort
--------------------------

If you're trying to get Device::SerialPort to work on an untested platform,
please take a look at the top of the "SerialPort.pm" file, and examine the
paths where "termios.ph" is searched for.  Basically, SerialPort.pm needs
the following constants to operate correctly:

Must have these:
	TIOCM_RTS
	TIOCM_DTR
	TIOCMBIS
	TIOCMBIC
	TIOCMGET

Optional: I have only found *both* of these under Linux:
	TIOCINQ
	TIOCOUTQ

Optional: I have only found this one under Linux:
	TIOCSERGETLSR

Once you get SerialPort.pm running happily (you can set $DEBUG=1 near the
top), try modifying (from the sendpage package) the script "modemtest"
to use your serial port with a modem attached.  This script will try to
examine all the possible settings for your vendor's serial port, and
will try to talk to the modem using Device::SerialPort.  If you can
get this script talking to the modem, sendpage should operate just fine.


Misc
----

The TODO file lists a large number of things I still want to have
working before the first "stable" release.

For updates, check out the sourceforge project at:
	http://sendpage.sourceforge.net

Thanks for using sendpage!


-Kees Cook    (cook@cpoint.net)

